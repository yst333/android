※ App 제작 절차

1. App의 구성 = Java 파일 + XML 파일 + Resource(기타 이미지, 사운드, 동영상 파일 등)

2. Java 파일은 소스 파일로써 App의 로직을 나타내고, XML 파일은 App의 사용자 인터페이스를 나타냅니다.
   여기에, Resource 자원인 이미지와 사운드를 추가해 줍니다.

3. Android에서는 화면의 구성을 XML을 이용하여 선언적으로 나타내는 방법을 선호합니다.
   코드를 이용하여 화면을 작성할 경우, 화면을 변경하고자 하면 반드시 코드를 변경해야 하고,
   코드로 뷰(View)를 생성하면 뷰들이 적절하게 연결되어 있지 않은 경우에는 오류가 발생하고,
   이것을 디버깅하는 것은 상당히 골치가 아프기 때문에, XML을 이용하여 화면을 구성하고 있습니다.

4. App 구성 절차
  1) 1단계 : 사용자 인터페이스 작성
    첫 번째 단계는 XML을 이용하여 사용자 인터페이스 화면을 디자인합니다.
    안드로이드 스튜디오가 제공하는 비쥬얼 도구들을 사용하여 화면을 디자인할 수도 있고,
    개발자가 직접 XML 파일을 편집하여 화면을 디자인할 수도 있습니다.
    이때, 디자인 결과물은 레이아웃 파일로 저장됩니다.

  2) 2단계 : 자바 코드 작성
     두 번째 단계는 자바를 이용하여 코드를 작성합니다. 개발자가 직접 필요한 클래스를 작성하거나
     안드로이드에서 제공하는 라이브러리 클래스를 가져다가 사용하기도 합니다.
     사용자 인터페이스와 자바 코드가 합쳐지면 하나의 애플리케이션이 됩니다.
     애플리케이션이 제작되면 실제 장치나 에뮬레이터로 다운로드하여 실행하면 됩니다.
     만약, 올바르게 동작하지 않으면 디버깅을 통해 문제를 해결합니다.

  3) 3단계 : Manifest(매니페스트) 파일 작성
      애플리케이션을 구성하고 있는 컴포넌트를 기술하고(액티버티를 선언하고)
      실행 시에 필요한 권한을 지정합니다.

5. Android Studio 구성
   왼편(프로젝트 뷰) + 중앙(소스 코드 또는 디자인 뷰) + 하단(컴파일 또는 진행 사항 메시지 표시)
  
   1) 프로젝트 뷰 폴더 구성
       ① JAVA = 자바 소스 파일들이 들어 있는 폴더입니다.
       ② Gradle Scripts = 그레이들(Gradle)은 빌드 시에 필요한 스크립트입니다.
       ③ res = 각종 리소스(자원)들이 저장되는 폴더입니다. drawable에는 해상도별로 아이콘 파일들이 
                  저장됩니다. layout에는 화면의 구성을 정의합니다. values에는 문자열과 같은 리소스가
                  저장됩니다. menu에는 메뉴 리소스들이 저장되어 있습니다.
       ④ manifest = XML 파일로 App의 전반적인 정보, 즉 App의 이름이나 컴포넌트 구성과 같은
                          정보를 가지고 있습니다. (manifest = 동사 : 드러내다, 보여주다, 나타내다 등 의미)

   2) 자바 소스 구성
       자바 프로그램의 main( ) 함수와 비슷한 역할을 하는 onCreate( ) 함수를 활용합니다.
       ① package 000;
           패키지(package)는 서로 관련 있는 클래스들을 모아놓은 컨테이너로서
           패키지를 하나 생성하여 현재의 클래스를 이 패키지에 넣겠다는 것을 나타냅니다.

       ② import 000;
          필요한 클래스를 소스 파일에 포함시킬때, import 구문을 작성해 주며, Alt + Enter 를 클릭해도 됩니다.
          import 문장은 외부의 패키지나 클래스를 소스에 포함시킬 때 사용합니다.
          앞에 android가 붙은 패키지는 안드로이드가 제공하는 패키지를 의미합니다.

       ③ public class MainActivity extends AppCompatActivity {...}
           클래스는 객체 지향 프로그래밍에서 가장 기본이 되는 최소 단위이며,
           안드로이드에서 액티비티는 Activity 클래스로 생성됩니다.
           AppCompatActivity는 Activity 클래스의 자식 클래스입니다.
           AppCompatActivity에서 상속을 받아서 MainActivity 클래스를 작성하면,
           MainActivity 클래스도 Activity(액티비티)가 됩니다.
           Activity(액티비티)는 안드로이드에서 애플리케이션을 구성하는 컴포넌트 중 하나입니다.
           참고로, Activity(액티비티)는 화면을 통하여 사용자와 상호작용하는 활동을 의미합니다.

           액티비티는 어떤 역할을 하는 컴포넌트 일까요? 사용자가 화면을 통하여 어떤 작업을 할 수 있도록 하는
           컴포넌트가 바로 액티비티입니다. 예를 들어 전화를 거는 화면, 사진을 촬영하는 화면, 이메일을 보내는 화면,
           지도를 보여주는 화면이 모두 액티비티로 작성됩니다. 애플리케이션은 여러 개의 액티비티들을 가질 수 있습니다.
           하지만, 하나의 순간에 "사용자는 오직 하나의 액티비티하고만 상호작용"을 합니다.
           아울러, 액티비티는 다른 액티비티로 넘어갈 수 있습니다.

       ④ @Override
          @Override는 메소드 오버라이드(메소드 재정의) 어노테이션을 나타냅니다.
          @Override는 아래의 메소드가 부모 클래스의 메소드를 재정의(오버라이드)하였다는 것을
          명확하게 컴파일러에게 전달해 줍니다. 만약 재정의가 성립되지 않으면 컴파일러는 경고를
          합니다. 어노테이션이 필요한 이유는 메소드의 이름을 잘못 적으면 올바르게 매소드 재정의가
          되지 않기 때문입니다.

       ⑤ public void onCreate(Bundle savedInstanceState) {...}
           onCreate() 메소드는 안드로이드 시스템에 의하여 액티비티가 생성되는 순간에 딱 한번 호출됩니다.
           딱 한번 수행되기 때문에 모든 초기화와 사용자 인터페이스 설정이 여기서 이루어져야 합니다.
           onCreate() 메소드의 매개변수인 savedInstanceState는 애플리케이션이 이전에 실행되었던
           상태를 전달하여 줍니다. 자바 프로그램의 main( ) 함수와 비슷한 역할을 합니다.

       ⑥ super.onCreate(savedInstanceState);
          위의 문장은 부모 클래스인 AppCompatActivity 클래스의 onCreate()를 호출하는 문장입니다.
          부모 클래스의 생성자도 호출해주는 편이 안전합니다. super는 상속 관계에서 부모 클래스를
          나타내는 키워드입니다.

       ⑦ setContentView(R.layout.activity_main);
           setContentView()는 액티비티의 화면을 설정하는 함수입니다.
           R.layout.activity_main을 액티비티의 화면으로 하겠다는 의미입니다.

           R.layout.activity_main 의미
           자바에서 점/도트 연산자(.)는 클래스의 멤버를 참조할 때 사용하는 연산자입니다.
           따라서, R이라는 클래스가 있고 그 안에 layout이라는 멤버가 있고 또 그 안에
           activity_main.xml 이 있을 거라고 예상할 수 있습니다.
           화면의 패키지 탐색기에서 res 폴더 아래에 보면 layout 폴더가 있고
           그 안에 activity_main.xml 이라는 파일이 있다는 의미입니다. 따라서
           R.layout.activity_main이 이 파일과 연관되어 있다는 것을 의미합니다.

        ⑧ 안드로이드 애플리케이션은 어디서 실행이 시작되는가?
          안드로이드 소스 코드를 살펴보면 액티비티만 정의되어 있고 자바 소스의 main() 메소드는 없습니다.
          안드로이드에서는 애플리케이션의 실행이 main()에서 시작되는 것이 아니고 액티비티별로
          독립적으로 실행하게 됩니다. 개발자는 애플리케이션을 이루는 액티비티 중에서 가장 먼저 실행되는
          액티비티를 지정합니다. 만약 스마트폰 사용자가 이 애플리케이션을 선택하여 실행하면
          지정된 액티비티가 실행됩니다. 앞서 애프리케이션은 MainActivity의 onCreate()메소드가
          호출되면서 실행이 시작됩니다.

        ⑨ App 실행 단축키 = Shift + F10

        ⑩ 클래스 자동 포함 기능
            코드를 작성할 때마다 필요한 클래스를 찾아서 자동으로 넣어주는 기능 설정은
            File - Settings - Editor - General - Auto Import 탭에서
            "Add unambigious imports on the fly" 옵션과
            "Optimize imports on the fly" 옵션을 모두 체크해줍니다.
                        
            

